
Описание: 
1) Таблица "client", которая содержит информацию о клиентах компании. Она содержит поля:
"id" - уникальный индентификатор клиента;
"first_name" - имя клиента;
"last_name" - фамилия клиента.

2) Таблица "apartment", которая содержит информацию о продаваемых квартирах. Она содержит поля:
"id" - уникальный индентификатор квартиры;
"address" - адрес квартиры;
"rooms" - количество комнат в квартире.

3) Таблица "view", которая содержит информацию о записи на просмотр квартир клиентами. Она содержит поля:
"id" - уникальный индентификатор записи;
"apartment_id" - индентификатор квартиры;
"client_id" - индентификатор клиента, записанного на просмотр;
"date" - дата просмотра квартиры.

ВАЖНО: На просмотр одной квартиры могут записаться несколько клиентов, а доин клиент может записаться на просмотр нескольких квартир. 

Исходя из описания схемы базы данных, необохдимо составить SQL-запрос, результатом которого будет список фамилий клиентов, записанных на просмотр двух и более 3-х комнатных квартир.   


CREATE TABLE client (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  first_name VARCHAR(30) NOT NULL,
  last_name VARCHAR(30) NOT NULL
  );

INSERT INTO client (first_name, last_name)
VALUES ('Владислав', 'Попов'),
       ('Игорь', 'Петров'),
       ('Иван', 'Сидоров'),
       ('Оксана', 'Самойлова'),
       ('Вера', 'Шабанова');

CREATE TABLE apartment (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  address VARCHAR(30) NOT NULL,
  rooms INTEGER NOT NULL
  );

INSERT INTO apartment (address, rooms)
VALUES ('Санкт-Петербург, Ленинское шоссе, д. 50', 3),
       ('Санкт-Петербург, Ленинское шоссе, д. 50', 2),
       ('Санкт-Петербург, Пулковское шоссе, д. 5', 2),
       ('Санкт-Петербург, Пулковское шоссе, д. 40', 3),
       ('Санкт-Петербург, Проспект Просвещения, д. 34', 2),
       ('Санкт-Петербург, проспект Энгельса, д. 20', 1),
       ('Санкт-Петербург, проспект Энгельса, д. 30', 3),
       ('Санкт-Петербург, проспект Энгельса, д. 20', 2);

CREATE TABLE view (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  apartment_id INTEGER,
  client_id INTEGER,
  date TIMESTAMP NOT NULL,
  FOREIGN KEY (apartment_id) REFERENCES apartment (id),
  FOREIGN KEY (client_id) REFERENCES client (id)
  );

INSERT INTO view (apartment_id, client_id, date)
VALUES (1, 1, '2022-12-20 13:00:00'),
       (1, 2, '2022-12-20 13:40:00'),
       (1, 3, '2022-12-20 14:30:00'),
       (2, 1, '2022-12-20 16:50:00'),
       (2, 2, '2022-12-23 17:00:00'),
       (2, 5, '2022-12-23 12:30:00'), 
       (3, 2, '2022-12-23 12:00:00'),
       (3, 5, '2022-12-23 14:30:00'),
       (3, 1, '2022-12-23 15:30:00'),
       (4, 1, '2022-12-24 11:00:00'),
       (4, 2, '2022-12-24 12:30:00'),
       (5, 3, '2022-12-24 13:30:00'),
       (5, 4, '2022-12-25 14:30:00'),
       (5, 5, '2022-12-25 16:30:00'),
       (6, 1, '2022-12-26 10:00:00'),
       (6, 2, '2022-12-26 14:00:00'),
       (5, 1, '2022-12-27 10:00:00'),
       (5, 2, '2022-12-27 12:00:00'),
       (5, 3, '2022-12-27 14:00:00'),
       (5, 4, '2022-12-27 16:00:00'),
       (5, 5, '2022-12-27 18:00:00'),
       (6, 3, '2022-12-29 18:20:00'),
       (6, 4, '2022-12-29 19:30:00'),
       (6, 5, '2022-12-29 21:00:00'),
       (7, 2, '2022-12-30 12:00:00'),
       (7, 3, '2022-12-30 13:00:00'),
       (7, 5, '2022-12-30 14:40:00'),
       (8, 4, '2022-12-30 14:30:00'),
       (8, 5, '2022-12-30 15:30:00');


SELECT  client.last_name AS last_name, COUNT(view.apartment_id) as view_apartment
FROM client INNER JOIN view ON client.id = view.client_id 
            INNER JOIN apartment ON  view.apartment_id = apartment.id  
WHERE apartment.rooms = 3 
GROUP by client.last_name 
HAVING COUNT(view.apartment_id)>= 2
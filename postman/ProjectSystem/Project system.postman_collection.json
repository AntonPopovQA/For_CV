{
	"info": {
		"_postman_id": "a23ad641-68b0-45fe-9f78-be072f6264aa",
		"name": "Project system",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20303909"
	},
	"item": [
		{
			"name": "Есть права на создание проекта",
			"item": [
				{
					"name": "Create new project, 200 OK",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let responseJson = pm.response.json();\r",
									"let projectId = responseJson.id;\r",
									"\r",
									"let schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"name\": {\r",
									"            \"type\": \"string\"\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"name\"\r",
									"          ]\r",
									"    }\r",
									"}\r",
									"\r",
									"pm.test('ProjectId', () => {\r",
									"    pm.globals.set(\"projectId\", projectId);\r",
									"});\r",
									"\r",
									"pm.test('Schema is valid', () => {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"pm.test(\"Auth is Bearer token\", () => {\r",
									"    pm.expect(pm.response.headers.get('Authorization')).to.eql('Bearer \"{{Token}}\"');\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Test data type of the response\", () => {\r",
									"    pm.expect(responseJson.projectId).to.a(\"string\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{Token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Тестовый проект\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/projects",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"projects"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Нет прав на создание проекта",
			"item": [
				{
					"name": "Create new project, 403 Forbidden",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"name\": {\r",
									"            \"type\": \"string\"\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"name\"\r",
									"          ]\r",
									"    }\r",
									"}\r",
									"\r",
									"pm.test('Schema is valid', () => {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"pm.test(\"Auth is Bearer token\", () => {\r",
									"    pm.expect(pm.response.headers.get('Authorization')).to.eql('Bearer \"{{Token_403}}\"');\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 403\", () => {\r",
									"    pm.response.to.have.status(403);\r",
									"    pm.response.to.have.status(\"Forbidden\");\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{Token_403}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Тестовый проект\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/projects",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"projects"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Create new project, 400 Bad Request",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let schema = {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"        \"name\": {\r",
							"            \"type\": \"string\"\r",
							"          },\r",
							"          \"required\": [\r",
							"            \"name\"\r",
							"          ]\r",
							"    }\r",
							"}\r",
							"\r",
							"pm.test('Schema is valid', () => {\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"pm.test(\"Auth is Bearer token\", () => {\r",
							"    pm.expect(pm.response.headers.get('Authorization')).to.eql('Bearer \"{{Token}}\"');\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 400\", () => {\r",
							"    pm.response.to.have.status(400);\r",
							"    pm.response.to.have.status(\"Bad Request\");\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{Token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"  --  \"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/api/projects",
					"host": [
						"{{URL}}"
					],
					"path": [
						"api",
						"projects"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create new project,  400 Bad Request ( name has Integer type)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let schema = {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"        \"name\": {\r",
							"            \"type\": \"string\"\r",
							"          },\r",
							"          \"required\": [\r",
							"            \"name\"\r",
							"          ]\r",
							"    }\r",
							"}\r",
							"\r",
							"pm.test('Schema is valid', () => {\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"pm.test(\"Auth is Bearer token\", () => {\r",
							"    pm.expect(pm.response.headers.get('Authorization')).to.eql('Bearer \"{{Token}}\"');\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 400\", () => {\r",
							"    pm.response.to.have.status(400);\r",
							"    pm.response.to.have.status(\"Bad Request\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{Token}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": 55\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/api/projects",
					"host": [
						"{{URL}}"
					],
					"path": [
						"api",
						"projects"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create new project , 400 Bad Request ( name is null)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let schema = {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"        \"name\": {\r",
							"            \"type\": \"string\"\r",
							"          },\r",
							"          \"required\": [\r",
							"            \"name\"\r",
							"          ]\r",
							"    }\r",
							"}\r",
							"\r",
							"pm.test('Schema is valid', () => {\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"pm.test(\"Auth is Bearer token\", () => {\r",
							"    pm.expect(pm.response.headers.get('Authorization')).to.eql('Bearer \"{{Token}}\"');\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 400\", () => {\r",
							"    pm.response.to.have.status(400);\r",
							"    pm.response.to.have.status(\"Bad Request\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{Token}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": null\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/api/projects",
					"host": [
						"{{URL}}"
					],
					"path": [
						"api",
						"projects"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create new project , 400 Bad Request ( name is empty)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let schema = {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"        \"name\": {\r",
							"            \"type\": \"string\"\r",
							"          },\r",
							"          \"required\": [\r",
							"            \"name\"\r",
							"          ]\r",
							"    }\r",
							"}\r",
							"\r",
							"pm.test('Schema is valid', () => {\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"pm.test(\"Auth is Bearer token\", () => {\r",
							"    pm.expect(pm.response.headers.get('Authorization')).to.eql('Bearer \"{{Token}}\"');\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 400\", () => {\r",
							"    pm.response.to.have.status(400);\r",
							"    pm.response.to.have.status(\"Bad Request\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{Token}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/api/projects",
					"host": [
						"{{URL}}"
					],
					"path": [
						"api",
						"projects"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create new project,  400 Bad Request ( name is array)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let schema = {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"        \"name\": {\r",
							"            \"type\": \"string\"\r",
							"          },\r",
							"          \"required\": [\r",
							"            \"name\"\r",
							"          ]\r",
							"    }\r",
							"}\r",
							"\r",
							"pm.test('Schema is valid', () => {\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"pm.test(\"Auth is Bearer token\", () => {\r",
							"    pm.expect(pm.response.headers.get('Authorization')).to.eql('Bearer \"{{Token}}\"');\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 400\", () => {\r",
							"    pm.response.to.have.status(400);\r",
							"    pm.response.to.have.status(\"Bad Request\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{Token}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": []\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/api/projects",
					"host": [
						"{{URL}}"
					],
					"path": [
						"api",
						"projects"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create new project, 401 Unauthorized",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let schema = {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"        \"name\": {\r",
							"            \"type\": \"string\"\r",
							"          },\r",
							"          \"required\": [\r",
							"            \"name\"\r",
							"          ]\r",
							"    }\r",
							"}\r",
							"\r",
							"pm.test('Schema is valid', () => {\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"pm.test(\"Auth is Bearer token\", () => {\r",
							"    pm.expect(pm.response.headers.get('Authorization')).to.eql('Bearer \"{{Token}}\"');\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 401\", () => {\r",
							"    pm.response.to.have.status(401);\r",
							"    pm.response.to.have.status(\"Unauthorized\");\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{Token}}",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Тестовый проект\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/api/projects",
					"host": [
						"{{URL}}"
					],
					"path": [
						"api",
						"projects"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create new project, 404 Not found",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{Token}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"delivery5!рф\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/api/project",
					"host": [
						"{{URL}}"
					],
					"path": [
						"api",
						"project"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create new project, 500 Server Error (object is empty)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let schema = {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"        \"name\": {\r",
							"            \"type\": \"string\"\r",
							"          },\r",
							"          \"required\": [\r",
							"            \"name\"\r",
							"          ]\r",
							"    }\r",
							"}\r",
							"\r",
							"pm.test('Schema is valid', () => {\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"pm.test(\"Auth is Bearer token\", () => {\r",
							"    pm.expect(pm.response.headers.get('Authorization')).to.eql('Bearer \"{{Token}}\"');\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 500\", () => {\r",
							"    pm.response.to.have.status(500);\r",
							"    pm.response.to.have.status(\"Internal Server Error\");\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{Token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/api/projects",
					"host": [
						"{{URL}}"
					],
					"path": [
						"api",
						"projects"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET projectId",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{Token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{URL}}/api/projects/{{projectId}}",
					"host": [
						"{{URL}}"
					],
					"path": [
						"api",
						"projects",
						"{{projectId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET  projectId 400",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{Token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{URL}}/api/projects/{projectId_400}",
					"host": [
						"{{URL}}"
					],
					"path": [
						"api",
						"projects",
						"{projectId_400}"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET  projectId 403",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{Token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{URL}}/api/projects/{projectId_403}",
					"host": [
						"{{URL}}"
					],
					"path": [
						"api",
						"projects",
						"{projectId_403}"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET  projectId 404 Not found",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{Token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{URL}}/api/projects/{projectId_404}",
					"host": [
						"{{URL}}"
					],
					"path": [
						"api",
						"projects",
						"{projectId_404}"
					]
				}
			},
			"response": []
		}
	]
}